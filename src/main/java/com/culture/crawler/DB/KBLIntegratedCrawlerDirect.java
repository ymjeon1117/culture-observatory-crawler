package com.culture.crawler.DB;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.FileTime;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Stream;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class KBLIntegratedCrawlerDirect {

    public static void main(String[] args) {
        try {
        	runMatchScheduleCrawlerAndInsertToDB(); // 1. Í≤ΩÍ∏∞ÏùºÏ†ï ÌÅ¨Î°§ÎßÅ
            Path excelFile = runCrowdExcelDownload(); // 2. Í¥ÄÏ§ëÏàò ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú
            if (excelFile != null) updateCrowdFromExcel(excelFile); // 3. ÏóëÏÖÄ Í∏∞Î∞ò DB ÏóÖÎç∞Ïù¥Ìä∏
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void runMatchScheduleCrawlerAndInsertToDB() throws Exception {
        System.setProperty("webdriver.chrome.driver", "C:\\chromedriver\\chromedriver.exe");

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--remote-allow-origins=*");
        WebDriver driver = new ChromeDriver(options);
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/culture_crawler_db?serverTimezone=Asia/Seoul", "root", "1234")) {

            conn.setAutoCommit(false);
            String today = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));

            PreparedStatement insertStmt = conn.prepareStatement("""
                INSERT INTO colct_sports_match_info (
                    MATCH_DE, BASE_YEAR, BASE_MT, BASE_DAY,
                    GRP_NM, LEA_NM, HOME_TEAM_NM, AWAY_TEAM_NM,
                    STDM_NM, SPORTS_VIEWNG_NMPR_CO, COLCT_DE, UPDT_DE
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """);

            PreparedStatement checkStmt = conn.prepareStatement("""
                SELECT COUNT(*) FROM colct_sports_match_info
                WHERE MATCH_DE = ? AND GRP_NM = ? AND HOME_TEAM_NM = ? AND AWAY_TEAM_NM = ?
            """);

            driver.get("https://www.kbl.or.kr/match/schedule?type=SCHEDULE");
            driver.manage().window().maximize();
            Thread.sleep(3000);

            int startYear = 2023;
            int startMonth = 1;
            int endYear = 2025;
            int endMonth = 7;

            List<String> targetMonths = new ArrayList<>();
            for (int year = endYear; year >= startYear; year--) {
                int from = (year == endYear) ? endMonth : 12;
                int to = (year == startYear) ? startMonth : 1;
                for (int month = from; month >= to; month--) {
                    targetMonths.add(String.format("%d. %02d", year, month));
                }
            }

            for (String targetMonth : targetMonths) {
                while (true) {
                    String currentMonth = driver.findElement(By.cssSelector(".filter-wrap ul.date li:nth-child(2) p"))
                            .getText().trim();
                    if (currentMonth.equals(targetMonth)) break;

                    driver.findElement(By.cssSelector(".filter-wrap ul.date li:nth-child(1) button")).click();
                    Thread.sleep(2000);
                }

                System.out.println("[INFO] ÏàòÏßë Ï§ë: " + targetMonth);

                List<WebElement> gameLists = driver.findElements(By.cssSelector(".cont-box .game-schedule-list"));
                for (WebElement gameList : gameLists) {
                    String matchDe = gameList.getAttribute("id").replace("game-", "").trim();
                    String baseYear = matchDe.substring(0, 4);
                    String baseMonth = matchDe.substring(4, 6);
                    String baseDay = matchDe.substring(6, 8);

                    List<WebElement> items = gameList.findElements(By.cssSelector("ul > li"));
                    for (WebElement item : items) {
                        if (item.findElements(By.cssSelector("div.sub")).isEmpty()) continue;
                        WebElement desc = item.findElement(By.cssSelector("div.sub > div.desc"));
                        String gameType = desc.findElement(By.cssSelector("span.label")).getText().trim();
                        String stadium = desc.findElements(By.cssSelector("ul > li")).get(1).getText().trim();

                        List<WebElement> teams = item.findElements(By.cssSelector("div.info ul.versus > li"));
                        if (teams.size() != 2) continue;

                        String homeTeam = normalizeTeamName(teams.get(0).findElements(By.tagName("p")).get(0).getText().trim());
                        String awayTeam = normalizeTeamName(teams.get(1).findElements(By.tagName("p")).get(0).getText().trim());



//                        // Ï§ëÎ≥µ Í≤ÄÏÇ¨
//                        checkStmt.setString(1, matchDe);
//                        checkStmt.setString(2, "KBL");
//                        checkStmt.setString(3, homeTeam);
//                        checkStmt.setString(4, awayTeam);
//
//                        ResultSet rs = checkStmt.executeQuery();
//                        rs.next();
//                        if (rs.getInt(1) > 0) {
//                            System.out.println("‚è© Ï§ëÎ≥µ Ïä§ÌÇµ: " + matchDe + " " + homeTeam + " vs " + awayTeam);
//                            rs.close();
//                            continue;
//                        }
//                        rs.close();

                        insertStmt.setString(1, matchDe);
                        insertStmt.setString(2, baseYear);
                        insertStmt.setString(3, baseMonth);
                        insertStmt.setString(4, baseDay);
                        insertStmt.setString(5, "KBL");
                        insertStmt.setString(6, gameType);
                        insertStmt.setString(7, homeTeam);
                        insertStmt.setString(8, awayTeam);
                        insertStmt.setString(9, stadium);
                        insertStmt.setNull(10, Types.DECIMAL); // Í¥ÄÏ§ëÏàòÎäî NULL
                        insertStmt.setString(11, today); // COLCT_DE
                        insertStmt.setString(12, today); // UPDT_DE

                        insertStmt.addBatch();
                    }
                }
            }

            insertStmt.executeBatch();
            conn.commit();
            System.out.println("‚úÖ KBL Í≤ΩÍ∏∞ÏùºÏ†ï DB Ï†ÄÏû• ÏôÑÎ£å");

        } finally {
            driver.quit();
        }
    }

    public static Path runCrowdExcelDownload() throws Exception {
        // ‚úÖ ÏûÑÏãú Îã§Ïö¥Î°úÎìú Ìè¥Îçî ÏÉùÏÑ±
        String baseDir = System.getProperty("user.dir");
        String timeTag = DateTimeFormatter.ofPattern("yyyyMMddHHmmss").format(LocalDateTime.now());
        String tempFolderPath = baseDir + File.separator + "kbl_temp_" + timeTag;
        Files.createDirectories(Paths.get(tempFolderPath));

        // ‚úÖ Îã§Ïö¥Î°úÎìú Í≤ΩÎ°ú ÏÑ§Ï†ï
        HashMap<String, Object> prefs = new HashMap<>();
        prefs.put("download.default_directory", tempFolderPath);
        prefs.put("download.prompt_for_download", false);
        prefs.put("profile.default_content_setting_values.automatic_downloads", 1);
        prefs.put("safebrowsing.enabled", true);

        // ‚úÖ ÌÅ¨Î°¨ ÏòµÏÖò ÏÑ§Ï†ï
        System.setProperty("webdriver.chrome.driver", "C:\\chromedriver\\chromedriver.exe");
        ChromeOptions options = new ChromeOptions();
        options.setExperimentalOption("prefs", prefs);
        options.addArguments("--remote-allow-origins=*");

        WebDriver driver = new ChromeDriver(options);
        WebDriverWait wait = new WebDriverWait(driver, java.time.Duration.ofSeconds(15));

//        // ‚úÖ ÏÉùÏÑ±Îêú Ìè¥Îçî ÏûêÎèô Ïó¥Í∏∞
//        try {
//            System.out.println("üìÅ ÏÉùÏÑ±Îêú ÏûÑÏãúÌè¥Îçî: " + tempFolderPath);
//            new ProcessBuilder("cmd", "/c", "start", "", "\"" + tempFolderPath + "\"").start();
//        } catch (Exception e) {
//            System.out.println("‚ùå Ìè¥Îçî ÏûêÎèô Ïó¥Í∏∞ Ïã§Ìå®: " + e.getMessage());
//        }

        try {
            // ‚úÖ ÏÇ¨Ïù¥Ìä∏ ÏßÑÏûÖ Î∞è Î©îÎâ¥ ÏÑ†ÌÉù
            driver.get("https://kbl.or.kr/record/crowd");
            driver.manage().window().maximize();

            new Select(wait.until(ExpectedConditions.elementToBeClickable(
                    By.cssSelector("#s2iZone > div > ul > li > select")))).selectByValue("team");
            Thread.sleep(1000);
            new Select(wait.until(ExpectedConditions.elementToBeClickable(
                    By.cssSelector("#s2iZone > div > ul > li:nth-child(2) > select")))).selectByValue("00");
            Thread.sleep(1500);

            WebElement excelButton = wait.until(ExpectedConditions.elementToBeClickable(
                    By.cssSelector("#s2iZone > div > div:nth-child(5) > div.mid-title > div > button")));
            excelButton.click();
            System.out.println("üì• ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú ÌÅ¥Î¶≠ ÏôÑÎ£å");

            // ‚úÖ ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú ÎåÄÍ∏∞
            Path latestXlsx = null;
            for (int i = 0; i < 20; i++) {
                latestXlsx = getLatestXlsxFile(tempFolderPath);
                if (latestXlsx != null) break;
                Thread.sleep(500);
            }

            if (latestXlsx == null || !waitForDownloadComplete(latestXlsx, 10)) {
                System.err.println("‚ùå ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú Ïã§Ìå® ÎòêÎäî ÏôÑÎ£åÎêòÏßÄ ÏïäÏùå");
                return null;
            }

            System.out.println("‚úÖ ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å: " + latestXlsx);
            return latestXlsx;

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            driver.quit();
        }
    }

    // Í∞ÄÏû• ÏµúÏã† ÏóëÏÖÄ ÌååÏùº Ï∞æÍ∏∞
    private static Path getLatestXlsxFile(String dir) {
        try (Stream<Path> files = Files.list(Paths.get(dir))) {
            return files
                    .filter(p -> p.getFileName().toString().startsWith("ÌåÄ Í¥ÄÏ§ëÌòÑÌô©"))
                    .filter(p -> p.toString().endsWith(".xlsx"))
                    .filter(p -> !p.toString().endsWith(".crdownload"))
                    .max(Comparator.comparing(p -> {
                        try {
                            return Files.getLastModifiedTime(p);
                        } catch (IOException e) {
                            return FileTime.fromMillis(0);
                        }
                    }))
                    .orElse(null);
        } catch (IOException e) {
            return null;
        }
    }

    private static boolean waitForDownloadComplete(Path file, int maxWaitSeconds) {
        try {
            long previousSize = -1;
            for (int i = 0; i < maxWaitSeconds * 2; i++) {
                if (!Files.exists(file)) return false;
                long currentSize = Files.size(file);
                if (currentSize > 0 && currentSize == previousSize) {
                    return true; // ÌÅ¨Í∏∞ Î≥ÄÌôî ÏóÜÏùå ‚Üí ÏôÑÎ£å
                }
                previousSize = currentSize;
                Thread.sleep(500);
            }
        } catch (Exception e) {
            System.out.println("‚ùå waitForDownloadComplete Ïã§Ìå®: " + e.getMessage());
        }
        return false;
    }
    public static void updateCrowdFromExcel(Path excelPath) throws Exception {
        Workbook workbook = null;
        FileInputStream fis = null;

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/culture_crawler_db?serverTimezone=Asia/Seoul", "root", "1234")) {

            // ÏóëÏÖÄ ÌååÏùºÏùÑ Î®ºÏ†Ä FileInputStreamÏúºÎ°ú Ïó¥Í≥† WorkbookÏúºÎ°ú Î°úÎìú
            fis = new FileInputStream(excelPath.toFile());
            workbook = new XSSFWorkbook(fis);

            Sheet sheet = workbook.getSheetAt(0);
            String today = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));

            int totalDbKblCount = 0;
            try (PreparedStatement countStmt = conn.prepareStatement(
                    "SELECT COUNT(*) FROM colct_sports_match_info WHERE GRP_NM = 'KBL'")) {
                ResultSet rs = countStmt.executeQuery();
                if (rs.next()) totalDbKblCount = rs.getInt(1);
                rs.close();
            }
            System.out.println("üìä DB ÎÇ¥ Ï†ÑÏ≤¥ KBL Í≤ΩÍ∏∞ Ïàò: " + totalDbKblCount + "Í±¥");

            PreparedStatement updateStmt = conn.prepareStatement("""
                UPDATE colct_sports_match_info
                SET SPORTS_VIEWNG_NMPR_CO = ?, UPDT_DE = ?
                WHERE MATCH_DE = ? AND GRP_NM = ? AND HOME_TEAM_NM = ?
            """);

            int updatedCount = 0;

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                String season = getCellString(row, 0);
                String homeRaw = getCellString(row, 1);
                String rawDate = getCellString(row, 6);
                String rawCrowd = getCellString(row, 7);

                if (!rawDate.matches("\\d{1,2}\\.\\d{1,2}")) continue;

                String[] parts = rawDate.split("\\.");
                int mm = Integer.parseInt(parts[0]);
                int dd = Integer.parseInt(parts[1]);

                int startYear = Integer.parseInt(season.split("-")[0].trim());
                int endYear = Integer.parseInt(season.split("-")[1].trim());
                int year = (mm <= 6) ? endYear : startYear;

                String matchDe = LocalDate.of(year, mm, dd).format(DateTimeFormatter.ofPattern("yyyyMMdd"));
                String cleanedCrowd = rawCrowd.replace(",", "").replace("Î™Ö", "").trim();
                if (cleanedCrowd.isEmpty()) continue;

                String homeTeam = normalizeTeamName(extractSecondWordOrOriginal(homeRaw));
                String grpNm = "KBL";

                updateStmt.setBigDecimal(1, new BigDecimal(cleanedCrowd + ".00000"));
                updateStmt.setString(2, today);
                updateStmt.setString(3, matchDe);
                updateStmt.setString(4, grpNm);
                updateStmt.setString(5, homeTeam);

                int updated = updateStmt.executeUpdate();
                if (updated > 0) {
                    updatedCount++;
                    System.out.println("‚úÖ ÏóÖÎç∞Ïù¥Ìä∏Îê®: " + matchDe + " / " + homeTeam + " / " + cleanedCrowd);
                } else {
                    System.out.println("‚ùå ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: " + matchDe + " / " + homeTeam);
                }
            }

            updateStmt.close();
            System.out.println("üéâ Í¥ÄÏ§ëÏàò ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å");
            System.out.println("üéØ DB ÎÇ¥ KBL Ï¥ù Í≤ΩÍ∏∞ Ïàò: " + totalDbKblCount + "Í±¥");
            System.out.println("üéØ Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏Îêú Í≤ΩÍ∏∞ Ïàò: " + updatedCount + "Í±¥");

        } finally {
            if (workbook != null) workbook.close();
            if (fis != null) fis.close();

            try {
                Files.deleteIfExists(excelPath);
                Files.walk(excelPath.getParent())
                    .sorted(Comparator.reverseOrder())
                    .forEach(path -> {
                        try {
                            Files.delete(path);
                        } catch (IOException e) {
                            System.out.println("‚ùå ÏÇ≠Ï†ú Ïã§Ìå®: " + path + " (" + e.getMessage() + ")");
                        }
                    });
                System.out.println("üßπ ÏûÑÏãú Ìè¥Îçî Î∞è ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å");
            } catch (IOException e) {
                System.out.println("‚ùå Ï†ÑÏ≤¥ ÏÇ≠Ï†ú Ïã§Ìå®: " + e.getMessage());
            }
        }
    }



    // ‚úÖ Í¥ÄÏ§ëÏàò ÌååÏùºÏö©: Îëê Î≤àÏß∏ Îã®Ïñ¥ Ï∂îÏ∂ú (ÏóÜÏúºÎ©¥ Í∑∏ÎåÄÎ°ú)
    private static String extractSecondWordOrOriginal(String teamName) {
        String[] parts = teamName.trim().split("\\s+");
        return parts.length >= 2 ? parts[1] : parts[0];
    }
    
    private static String getCellString(Row row, int col) {
        if (row == null || row.getCell(col) == null) return "";
        Cell cell = row.getCell(col);
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue().trim();
            case NUMERIC -> DateUtil.isCellDateFormatted(cell) ?
                    cell.getLocalDateTimeCellValue().toLocalDate().toString() :
                    String.format("%.2f", cell.getNumericCellValue());
            default -> "";
        };
    }

    private static String normalizeTeamName(String teamName) {
        teamName = teamName.trim();
        if (teamName.contains("Ï†ïÍ¥ÄÏû•")) return "KGC";
        if (teamName.contains("Í≥†Ïñë Ï∫êÎ°Ø")) return "Ï∫êÎ°Ø";
        return teamName;
    }

    private static String extractSecond(String name) {
        String[] parts = name.split("\\s+");
        return parts.length >= 2 ? parts[1] : parts[0];
    }
}
